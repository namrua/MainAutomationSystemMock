//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutomationSystem.Shared.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CoreEntities : DbContext
    {
        public CoreEntities()
            : base("name=CoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AppLocalisation> AppLocalisations { get; set; }
        public virtual DbSet<AsyncRequestType> AsyncRequestTypes { get; set; }
        public virtual DbSet<DataLocalisation> DataLocalisations { get; set; }
        public virtual DbSet<EmailAttachment> EmailAttachments { get; set; }
        public virtual DbSet<EmailParameter> EmailParameters { get; set; }
        public virtual DbSet<EmailParameterType> EmailParameterTypes { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmailTemplateParameter> EmailTemplateParameters { get; set; }
        public virtual DbSet<EmailType> EmailTypes { get; set; }
        public virtual DbSet<EntityType> EntityTypes { get; set; }
        public virtual DbSet<EnumLocalisation> EnumLocalisations { get; set; }
        public virtual DbSet<EnumType> EnumTypes { get; set; }
        public virtual DbSet<FileType> FileTypes { get; set; }
        public virtual DbSet<IncidentType> IncidentTypes { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobRun> JobRuns { get; set; }
        public virtual DbSet<JobType> JobTypes { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Preference> Preferences { get; set; }
        public virtual DbSet<ProcessingState> ProcessingStates { get; set; }
        public virtual DbSet<Severity> Severities { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRoleAssignment> UserRoleAssignments { get; set; }
        public virtual DbSet<UserRoleType> UserRoleTypes { get; set; }
        public virtual DbSet<ConferenceAccountType> ConferenceAccountTypes { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<BatchUploadOperationType> BatchUploadOperationTypes { get; set; }
        public virtual DbSet<BatchUploadState> BatchUploadStates { get; set; }
        public virtual DbSet<BatchUploadType> BatchUploadTypes { get; set; }
        public virtual DbSet<BatchUploadField> BatchUploadFields { get; set; }
        public virtual DbSet<BatchUploadItem> BatchUploadItems { get; set; }
        public virtual DbSet<EnvironmentType> EnvironmentTypes { get; set; }
        public virtual DbSet<IntegrationType> IntegrationTypes { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<AsyncRequest> AsyncRequests { get; set; }
        public virtual DbSet<ConferenceAccount> ConferenceAccounts { get; set; }
        public virtual DbSet<UserGroupType> UserGroupTypes { get; set; }
        public virtual DbSet<PayPalKey> PayPalKeys { get; set; }
        public virtual DbSet<PayPalRecord> PayPalRecords { get; set; }
        public virtual DbSet<BatchUpload> BatchUploads { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
    
        public virtual int ClearFiles(Nullable<System.DateTime> toDate, Nullable<int> maxItems, ObjectParameter rowcount)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var maxItemsParameter = maxItems.HasValue ?
                new ObjectParameter("MaxItems", maxItems) :
                new ObjectParameter("MaxItems", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearFiles", toDateParameter, maxItemsParameter, rowcount);
        }
    }
}
